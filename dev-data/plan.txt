посмотреть тему что бы если кластер упал - что бы сам и поднялся бы
а также посмотреть что бы сервер сам подымался если упал

добавить unbind request // не знаю зачем, но фишка с динамическим роутингом есть в марионете и якобы это прикольно - сделано
для анбинда передовать пораметры type и строку которой биндилось - сделано
если биндим второй раз - то перетирать первый бинд - сделано
при дестрое - делать полный анбинд // проверить это толком будет нельзя, но сделать всё равно надо что бы - ибо так правильно - сделано
не выкидывать ошибку при анбинде не существующего метода и\или не существующего роута - сделано

сделать так что бы всегда уберались первые и последние слеши - сделано
что бы урл  ////api/// был равен api, так же с пробелами в начали в конце - см выше

так сделать что бы принимало все типы запросов, а не только гет и пост - сделано


написать тест для того что бы можно было находить бинды с разными строками пораметров но с однинаковыми реквестами в итоге - сделано

!!!!!! написать ко всему выше написанно авто тесты - готово


ПОДУМАТЬ
добавить гзиппинг данных
так же сделать хоть какое нибудь кеширования - конечно в зависимости от запроса



придумать тему что бы если в функции произошла ошибка - что бы сервер не валился а кидал 500

https://blog.jetbrains.com/webstorm/2015/05/node-js-profiling-in-webstorm-part-1-cpu-profiling/

node --prof-process isolate-0xnnnnnnnnnnnn-v8.log > processed.txt

https://blog.jetbrains.com/webstorm/2015/07/node-js-profiling-in-webstorm-part-2-memory-profiling/

https://github.com/felixge/node-memory-leak-tutorial


добавить в тесты проверку на статусКод типо там 200, 302, 304, 404

200 - сделано
302 - сделано, НО не удалось задетектить 302, НО удалось задетектить редирект
304 - сделано
404 - сделано

прикрутить кластер для перформанс теста - сделано
починить кластер для перформанс теста, ибо после окончания теста никуда ничего не выходиться((
сейчас это пофикшено через setTimeout,1000

прикрутить роутинг, типо так, посмотреть как это сделано в экспресе
server.all(/path/to/api, function(req, res) {
    res.end('I am API')
});

посмотреть\почитать - http://nightwatchjs.org/ - фреймворк для автотестов на селениуме
к нему так же есть красивый отчётник

// посмотреть\прикрутить процент покрытия кода тестами - сделано
! тест коверидж не тестит зависимости, то есть тестит только те файлы которые есть в папке с тестами,
! дописать скрипт который бы копировал бы все нужные папки и поправить тесты под под новое расположение билда
// сделано, как оказалось можно юзать параметр --root
